package com.mootly.wcm.services.citruspay.impl;

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mootly.wcm.services.SequenceGenerator;
import com.mootly.wcm.services.citruspay.PaymentService;

public abstract class PaymentServiceGeneric implements PaymentService {
	private static final Logger logger = LoggerFactory.getLogger(PaymentServiceGeneric.class);
	String accessKey;
	String secretKey;
	SequenceGenerator sequenceGenerator;
	
	
	@Override
	public final String getAccessKey() {
		// TODO Auto-generated method stub
		return accessKey;
	}
	

	public final void setAccessKey(String accessKey) {
		this.accessKey = accessKey;
	}
	
	@Override
	public final String getSecretKey() {
		return secretKey;
	}

	public final void setSecretKey(String secretKey) {
		this.secretKey = secretKey;
	}



	/**
	 * It must be generated remember merchantTxId will be generated by the caller and should be passed as an argument
	 */
	@Override
	public final String getHMACSignature(String merchantTxId,String amount) {
		String HMACSignature = null;
		// TODO Auto-generated method stub
		if (accessKey != null && merchantTxId != null && amount != null) {
			try {
				//merchantAccessKey=HS6Q0E1N40OUSYCJXMX5&transactionId=t12345t1&amount=1.0
				String signature = String.format("merchantAccessKey=%s&transactionId=%s&amount=%s", getAccessKey(),merchantTxId,amount);
				String theSecretKey = getSecretKey();
				//HMACSignature = com.citruspay.util.HMACSignature.generateHMAC(signature, theSecretKey);
			}catch (Exception ex) {
				logger.error("Error has occurred in generating HMACSignature",ex);
				HMACSignature = null;
			}
		}		
		return HMACSignature;
	}

	@Override
	abstract public CITRUS_CONTENT_TYPE getContentType();		

	@Override
	abstract public CITRUS_CONTENT_TYPE getAccept();

	@Override
	public SequenceGenerator getSequenceGenerator() {
		// TODO Auto-generated method stub
		return sequenceGenerator;
	}
	
	@Override
	public void setSequenceGenerator(SequenceGenerator sequenceGenerator) {
		// TODO Auto-generated method stub
		this.sequenceGenerator = sequenceGenerator;
	}
	
	@Override
	public String newMerchantTxnId() {
		// TODO Auto-generated method stub
		if (sequenceGenerator != null) {
			long nextId = sequenceGenerator.getNextId("paymentIdSequence");
			String retValue = String.format("%05d",nextId);
			return retValue;
		}
		return null;
	}
	
	public Map<String,String> getHeaders() {
		return getHeaders(null);
	}
	
	public Map<String,String> getHeaders(String hMacSignature) {
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Accept", getContentType().getHeaderString());
		headers.put("Content-Type", getContentType().getHeaderString());
		headers.put("access_key", getAccessKey());
		
		if (hMacSignature != null) {
			headers.put("signature", hMacSignature);
		}
		
		return headers;
	}
}
