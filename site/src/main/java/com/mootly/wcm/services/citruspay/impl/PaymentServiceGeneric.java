package com.mootly.wcm.services.citruspay.impl;

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mootly.wcm.services.SequenceGenerator;
import com.mootly.wcm.services.citruspay.PaymentService;

public abstract class PaymentServiceGeneric implements PaymentService {
	private static final Logger logger = LoggerFactory.getLogger(PaymentServiceGeneric.class);
	String accessKey;
	String secretKey;
	String merchantId;
	String checkoutURL;
	String currency;
	SequenceGenerator sequenceGenerator;
	final String formatForAccessKeySSL= "%s%s%s%s"; //String data=merchantId+orderAmount+merchantTxnId+currency;
	final String formatForAccessKeyMOTO = "merchantAccessKey=%s&transactionId=%s&amount=%s";
	
	@Override
	public final String getAccessKey() {
		// TODO Auto-generated method stub
		return accessKey;
	}
	

	public final void setAccessKey(String accessKey) {
		this.accessKey = accessKey;
	}
	
	@Override
	public final String getSecretKey() {
		return secretKey;
	}

	public final void setSecretKey(String secretKey) {
		this.secretKey = secretKey;
	}
	
	@Override
	public String getMerchantId() {
		// TODO Auto-generated method stub
		return merchantId;
	}
	
	public void setMerchantId(String merchantId) {
		this.merchantId = merchantId;
	}
	
	@Override
	public String getCheckoutURL() {
		// TODO Auto-generated method stub
		return checkoutURL;
	}
	
	public void setCheckoutURL(String checkoutURL) {
		this.checkoutURL = checkoutURL;
	}
	
	
	@Override
	public String getCurrency() {
		// TODO Auto-generated method stub
		return currency;
	}
	
	public void setCurrency(String currency) {
		this.currency = currency;
	}
	
	
	
	/**
	 * It must be generated remember merchantTxId will be generated by the caller and should be passed as an argument
	 */
	@Override
	public final String getHMACSignatureSSL(String merchantTxId,String amount) {
		String HMACSignature = null;
		// TODO Auto-generated method stub
		if (accessKey != null && merchantTxId != null && amount != null) {
			try {
				//merchantAccessKey=HS6Q0E1N40OUSYCJXMX5&transactionId=t12345t1&amount=1.0
				//"merchantId=%s&orderAmount=%s&merchantTxnId=%s&currency=%s";
				//String data=merchantId+orderAmount+merchantTxnId+currency;
				String signature = String.format(formatForAccessKeySSL,getMerchantId() ,amount,merchantTxId,getCurrency());
				String theSecretKey = getSecretKey();
				HMACSignature = com.citruspay.util.HMACSignature.generateHMAC(signature, theSecretKey);
				if (logger.isInfoEnabled()) {
					logger.info("signature:" + signature);
					logger.info("theSecretKey:" + theSecretKey);
					logger.info("HMACSignature:" + HMACSignature);					
				}
			}catch (Exception ex) {
				logger.error("Error has occurred in generating HMACSignature",ex);
				HMACSignature = null;
			}
		}		
		return HMACSignature;
	}

	/**
	 * It must be generated remember merchantTxId will be generated by the caller and should be passed as an argument
	 */
	@Override
	public final String getHMACSignatureMOTO(String merchantTxId,String amount) {
		String HMACSignature = null;
		// TODO Auto-generated method stub
		if (accessKey != null && merchantTxId != null && amount != null) {
			try {
				//merchantAccessKey=HS6Q0E1N40OUSYCJXMX5&transactionId=t12345t1&amount=1.0
				String signature = String.format(formatForAccessKeyMOTO, getAccessKey(),merchantTxId,amount);
				String theSecretKey = getSecretKey();
				HMACSignature = com.citruspay.util.HMACSignature.generateHMAC(signature, theSecretKey);
			}catch (Exception ex) {
				logger.error("Error has occurred in generating HMACSignature",ex);
				HMACSignature = null;
			}
		}		
		return HMACSignature;
	}

	@Override
	abstract public CITRUS_CONTENT_TYPE getContentType();		

	@Override
	abstract public CITRUS_CONTENT_TYPE getAccept();

	@Override
	public SequenceGenerator getSequenceGenerator() {
		// TODO Auto-generated method stub
		return sequenceGenerator;
	}
	
	@Override
	public void setSequenceGenerator(SequenceGenerator sequenceGenerator) {
		// TODO Auto-generated method stub
		this.sequenceGenerator = sequenceGenerator;
	}
	
	@Override
	public String newMerchantTxnId() {
		// TODO Auto-generated method stub
		if (sequenceGenerator != null) {
			long nextId = sequenceGenerator.getNextId("paymentIdSequence");
			String retValue = String.format("%05d",nextId);
			return retValue;
		}
		return null;
	}
	
	public Map<String,String> getHeaders() {
		return getHeaders(null);
	}
	
	public Map<String,String> getHeaders(String hMacSignature) {
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Accept", getContentType().getHeaderString());
		headers.put("Content-Type", getContentType().getHeaderString());
		headers.put("access_key", getAccessKey());
		
		if (hMacSignature != null) {
			headers.put("signature", hMacSignature);
		}
		
		return headers;
	}
}
